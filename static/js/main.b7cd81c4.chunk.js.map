{"version":3,"sources":["components/Td.js","App.js","serviceWorker.js","index.js"],"names":["Tdc","data-value","this","props","value","onClick","func","Component","Presentational","state","input","answer","handleChange","bind","handleClick","handleButton","calculate","clear","setState","data","temp","empty","event","target","dataset","key","keyCode","temp1","join","error","eval","e","SyntaxError","alert","onkeypress","id","colSpan","style","backgroundColor","rowSpan","href","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7cd81c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Tdc extends Component {\r\n  render() {\r\n    return (\r\n      <td data-value={this.props.value} onClick={this.props.func}>\r\n          {this.props.value}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tdc;","import React from 'react';\nimport './App.css';\nimport Td from './components/Td';\n\nclass Presentational extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"0\",\n      answer: \"0\"\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n    this.calculate = this.calculate.bind(this);\n    this.clear = this.clear.bind(this);\n  }\n\n  clear() {\n    this.setState({\n      input: \"0\",\n      answer: \"0\"\n    });\n  }\n\n  handleChange(data) {\n    var temp = this.state.input;\n\n    if (this.state.input === \"0\") {\n      temp = data;\n    } else {\n      temp = [...this.state.input, data];\n    }\n\n    if (this.state.answer !== \"0\") {\n      var empty = data;\n      this.setState({\n        input: empty,\n        answer: \"0\"\n      });\n    } else {\n      this.setState({\n        input: temp\n      });\n    }\n  }\n\n  handleClick(event) {\n    this.handleChange(event.target.dataset.value);\n\n  }\n\n  handleButton(event) {\n    if (event.key === \"Enter\" || event.key === \"=\") {\n      this.calculate();\n    } else if ((event.keyCode >= 48 && event.keyCode <= 57) || (event.keyCode >= 42 && event.keyCode <= 47)) {\n      this.handleChange(event.key);\n    }\n  }\n\n  calculate() {\n    var temp1 = this.state.input.join(\"\");\n    var error = false;\n\n    try {\n      temp1 = eval(temp1);\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        alert(\"Syntax Error\");\n        this.clear();\n        error = true;\n      }\n    }\n\n    if (!error) {\n      this.setState({\n        answer: temp1\n      });\n    }\n  }\n  render() {\n    onkeypress = this.handleButton;\n    return (\n      <div>\n        <div>\n          <h2>Calculator</h2>\n          <table id=\"calcultorBody\">\n            <tbody>\n              <tr>\n                <td colSpan=\"4\" id=\"text\"><div>{this.state.input}</div><div>{this.state.answer}</div></td>\n              </tr>\n              <tr>\n                <td style={{ backgroundColor: 'red' }} data-value='ac' colSpan='2' onClick={this.clear}>AC</td>\n                <Td value=\"/\" func={this.handleClick} />\n                <Td value=\"*\" func={this.handleClick} />\n              </tr>\n              <tr>\n                <Td value=\"7\" func={this.handleClick} />\n                <Td value=\"8\" func={this.handleClick} />\n                <Td value=\"9\" func={this.handleClick} />\n                <Td value=\"+\" func={this.handleClick} />\n              </tr>\n              <tr>\n                <Td value=\"4\" func={this.handleClick} />\n                <Td value=\"5\" func={this.handleClick} />\n                <Td value=\"6\" func={this.handleClick} />\n                <Td value=\"-\" func={this.handleClick} />\n              </tr>\n              <tr>\n                <Td value=\"1\" func={this.handleClick} />\n                <Td value=\"2\" func={this.handleClick} />\n                <Td value=\"3\" func={this.handleClick} />\n                <td style={{ backgroundColor: 'blue' }} rowSpan=\"2\" onClick={this.calculate}>=</td>\n              </tr>\n              <tr>\n                <td data-value='0' colSpan='2' onClick={this.handleChange}>0</td>\n                <Td value=\".\" func={this.handleClick} />\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div id=\"author\">\n          <p>Designed and Coded by</p> <br />\n          <a href=\"https://github.com/UsmanFayyaz/calculator\">Usman Fayyaz</a>\n        </div>\n      </div>\n    );\n  }\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Presentational />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}